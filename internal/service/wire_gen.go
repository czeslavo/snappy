// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package service

import (
	"github.com/czeslavo/snappy/internal/adapters"
	"github.com/czeslavo/snappy/internal/application"
	"github.com/czeslavo/snappy/internal/ports"
	"github.com/czeslavo/snappy/internal/service/config"
	"github.com/sirupsen/logrus"
	"net/http"
)

// Injectors from wire.go:

func BuildService() (*Service, error) {
	configConfig, err := config.ReadConfigFromEnv()
	if err != nil {
		return nil, err
	}
	httpPort := configConfig.HTTPPort
	snapshotsDirectory := configConfig.SnapshotsDirectory
	snapshotsFileSystemRepository, err := adapters.NewSnapshotsFileSystemRepository(snapshotsDirectory)
	if err != nil {
		return nil, err
	}
	getLatestSnapshotHandler := application.NewGetLatestSnapshotHandler(snapshotsFileSystemRepository)
	fieldLogger := provideLogger()
	httpServer := ports.NewHTTPServer(httpPort, getLatestSnapshotHandler, fieldLogger)
	client := _wireClientValue
	cameraURL := configConfig.CameraURL
	jpegCamera, err := adapters.NewJPEGCamera(client, cameraURL)
	if err != nil {
		return nil, err
	}
	takeSnapshotHandler := application.NewTakeSnapshotHandler(jpegCamera, snapshotsFileSystemRepository)
	ticker := ports.NewTicker(takeSnapshotHandler, configConfig, fieldLogger)
	service := &Service{
		HttpServer: httpServer,
		Ticker:     ticker,
		Logger:     fieldLogger,
	}
	return service, nil
}

var (
	_wireClientValue = &http.Client{}
)

// wire.go:

func provideLogger() logrus.FieldLogger {
	return logrus.New()
}
